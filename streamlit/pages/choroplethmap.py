import streamlit as st
import pandas as pd
import folium
from streamlit_folium import st_folium
import json

st.set_page_config(page_title="Choropleth Map", page_icon="üó∫Ô∏è")

st.title("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏£‡∏≤‡∏¢‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ (Choropleth)")


import os

BASE_DIR = os.getcwd()
# BASE_DIR = os.path.abspath(os.path.join(os.getcwd(), ".."))
st.write(BASE_DIR)
geojson_path = os.path.join(BASE_DIR, "save", "gadm41_THA_2.json")
st.write(geojson_path)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡πÅ‡∏ö‡∏ö relative ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå Python ‡∏ô‡∏µ‡πâ
# BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# geojson_path = os.path.join(BASE_DIR, "../save/gadm41_THA_2.json")

# # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
with open(geojson_path, "r", encoding="utf-8") as f:
     amphoe_geojson = json.load(f)


# 1. ‡πÇ‡∏´‡∏•‡∏î GeoJSON ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
# with open("../work/save/gadm41_THA_2.json", "r", encoding="utf-8") as f:
    # amphoe_geojson = json.load(f)

st.write(amphoe_geojson)
st.write(len(amphoe_geojson))

# 2. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏© (‡πÄ‡∏ä‡πà‡∏ô pm2.5) ‡∏£‡∏≤‡∏¢‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
# ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: "amphoe_code" (‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö GeoJSON) ‡πÅ‡∏•‡∏∞ "pm25"
# df = pd.read_parquet("save/f65bb697be7843fd9e092d83f914065f-0.parquet", engine="pyarrow")
df = pd.read_csv("save/f20c8d74ef9641aca1f97d8b39261aa4-0.csv")
df_code = pd.read_csv("save/amphoe_coord.csv")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

df_code = df_code.rename(columns={"amphoeEN":"district"})
st.dataframe(df.head())
st.dataframe(df_code.head())

df = pd.merge(
    df,
    df_code[["district", "amphoe_id"]],
    on="districts",
    how="left"  # ‡πÉ‡∏ä‡πâ 'left' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• df ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
)
st.dataframe(df.head())



# 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Folium
m = folium.Map(location=[13.5, 100.7], zoom_start=6)

# 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Choropleth map
folium.Choropleth(
    geo_data=amphoe_geojson,
    data=df,
    columns=["amphoe_id", "pm2.5"],  # ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤
    key_on="feature.properties.CC_2",  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á GeoJSON
    fill_color="YlOrRd",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="PM2.5 (¬µg/m¬≥)",
).add_to(m)

# Optional: ‡πÉ‡∏™‡πà popup ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
folium.GeoJson(
    amphoe_geojson,
    name="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
    tooltip=folium.GeoJsonTooltip(
        fields=["NAME_2"],
        aliases=["‡∏≠‡∏≥‡πÄ‡∏†‡∏≠:"],
        localize=True
    )
).add_to(m)

# 5. ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô Streamlit
st_folium(m, height=1600)





# ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å GeoJSON
geo_ids = set([
    feature["properties"]["CC_2"]
    for feature in amphoe_geojson["features"]
])
st.write(len(geo_ids))
st.dataframe(geo_ids)
# ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô df (‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô)
df_ids = set(df["amphoe_id"].dropna().astype(int).astype(str))

st.dataframe(df_ids)
# ‡∏´‡∏≤‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô geo ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô df)
missing_ids = geo_ids - df_ids

# ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
missing_names = [
    feature["properties"]["NAME_2"]
    for feature in amphoe_geojson["features"]
    if feature["properties"]["CC_2"] in missing_ids
]

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
st.markdown(f"### ‚ùå ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô (pm2.5): {len(missing_names)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
st.write(missing_names)
